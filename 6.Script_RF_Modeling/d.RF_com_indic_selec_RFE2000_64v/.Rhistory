sample(b, 6, replace = T)
rep(b)
?rep
rep(a)
sala <- c(1:49)
sala
amostra_sala <- sample(sala, 10, replace = F)
amostra_sala
iris
foreign
require(foreign)
perfil = read.epiinfo('http://www.uel.br/pessoal/silvano/Dados/Perfil.rec')
names(perfil)
str(perfil)
View(perfil)
head(perfil)
head(perfil)
perfil[1:15, 1:10]
tail(perfil)
Estatura = with(perfil, sample(ESTATURA, 25, replace = F))
Estatura
Estatura = with(perfil, sample(perfil$ESTATURA, 25, replace = F))
Estatura
mean(Estatura)
with(perfil, mean(perfil$ESTATURA))
mean(Estatura)
e = mean(perfil$ESTATURA)
e
with(perfil, mean(ESTATURA))
with(perfil, mean(perfil$ESTATURA, na=""))
mean(perfil$ESTATURA)
mean(perfil$ESTATURA, na="")
perfil2 <- na.omit(perfil)
View(perfil2)
ls()
rm(perfil2)
ls()
perfil2
with(perfil, mean(perfil$ESTATURA))
e <- perfil$ESTATURA
e
e2 <- na.omit(e)
e2
mean(e2)
e2
e
mean(e)
e1 <- c(e, na="")
e1
rm(e1)
ls()
e2
length(e2)
mean(e2)
e2
e
e2 <- e - e[87]
e2
e2 <- c(e - e[87])
e2
rm(e2)
ls()
e
ls()
e
e1 <- e[!is.na(e)]
e1
mean(e1)
p <- perfil$PESO
p
mean(p)
e
mean(e)
e2 <- e[!is.na(e)]
e2
mean(e2)
i <- perfil$IDADE
i
mean(i)
imc <- perfil$IMC
imc
mean(imc)
imc1 <- imc[!is.na(imc)]
imc1
mean(imc1)
names(perfil)
c <- perfil$CURSINHO
c
length(c)
summary(c)
summary(perfil$CURSINHO)
summary(perfil$ESTATURA)
summary(perfil$PESO)
require(car)
View(car)
dados = read.table('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
require(foreign)
dados = read.table('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
dados = read.epiinfo('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
iris
dim(iris)
ls()
rm(ls())
ls()
ls()
a <- iris
summary(a)
summary(a)
summary(a)
dim(a)
?sample
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
summary(amostra)
length(amostra)
length(amostra[amostra==1])
length(amostra[amostra==0])
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(345)
sample(c(100), 3)
sample(c(100), 3)
set.seed(345)
sample(c(100), 3)
sample(c(100), 3)
sample(c(100), 3)
sample(c(100), 3)
set.seed(345)
sample(c(100), 3)
a
View(a)
a1 <- a[sample(a), 44]
a1 <- a[sample(nrow(a), 50),]
a1 <- a[sample(nrow(a), 10),]
View(a1)
a1 <- a[sample(nrow(a), 10, prob = c(0.5, 0.5, 0.5)),]
a1 <- a[sample(nrow(a), 10, prob = c(0.5, 0.5)),]
a1 <- a[sample(nrow(a), 10, prob = 'srswod'),]
a1 <- a[sample(nrow(a), 10,),]
View(a1)
getwd()
getwd()
getwd()
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Sistemas Complexos/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR")
getwd()
getwd()
getwd()
version()
version
y <- 3.4
w <- y/k
k
k <- 2^3
w <- y/k
w
contributors()
version
getwd()
data("AirPassengers")
View(data)
data
d <- data("AirPassengers")
View(d)
data("AirPassengers")
load(d)
print(d)
data(AirPassengers)
d <- data(AirPassengers)
d
a = 2
b = 3
a + b
options(prompt = "R>")
3^2
3/2
2\7
2\\3
2/3
plot(x^2-3*x=0)
plot(x^2-3*x=0,x)
x <- 2
y <- 4.4
k <- y^x
print(k)
??"mean"
pi
2^4/2+1
mat <- matrix(data = randu(25), nrow = 5, ncol = 5, byrow = TRUE)
x <- sample(25)
x
x <- sample(25, replace = TRUE)
x
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
colnames(mat) <- c('Col1', 'Col2', 'Col3', 'Col4', 'Col5')
mat
rownames(mat) <- c('Line1', 'Line2', 'Line3', 'Line4', 'Line5')
mat
det(mat)
rm(list = ls())
Rserve
library(Rserve)
Rserve
library(Rserve)
Rserve()
df <- data.frame(
Ano <- c(2013, 2013, 2013),
País <- c('Arab World', 'Caribbean States',
'Central Europe'),
Expectativa.de.Vida <- c(71, 72, 76)
)
df
df <- data.frame(
Ano <- c('2013', '2013', '2013'),
País <- c('Arab World', 'Caribbean States',
'Central Europe'),
Expectativa.de.Vida <- c(71, 72, 76)
)
df
df <- data.frame(
Ano <- c('2013', '2013', '2013'),
País <- c('Arab World', 'Caribbean States',
'Central Europe'),
Expectativa.de.Vida <- c(71, 72, 76)
)
df
df <- data.frame(
Ano <- c('2013', '2013', '2013'),
País <- c('Arab World', 'Caribbean States',
'Central Europe'),
Expectativa <- c(71, 72, 76)
)
df
View(df)
rm(list = ls())
df.1 <- data.frame(
Ano <- c(2021, 2021, 2021),
País <- c('Brasil', 'Chile', 'Bolívia'),
Expectativa.de.vida <- c(71, 74, 79)
)
df
df.1
df.1 <- data.frame(
Ano <- c(2021, 2021),
País <- c('Brasil', 'Argentina')
)
df
df.1
remove.packages("Rserve", lib="~/R/win-library/4.1")
library(Rserve)
rm(list = ls())
df.1 <- data.frame(
Nome <- c('Sergio', 'Ricardo'),
Idade <- c(55, 53)
)
df.1
table(df.1)
rm(list = ls())
require(UsingR)
library(UsingR)
install.packages('Rserve')
library(Rse)
library(Rserve)
install.packages('Rserve')
library(Rserve)
install.packages("Rserve")
install.packages('Rserve')
require(Rserve)
require(UsingR)
data("rivers")
dados <- data("rivers")
View(dados)
dados <- data(rivers)
View(dados)
require(HistData)
rm(dados)
head(rivers)
class(rivers)
x <- rivers
x
tail(x, 6)
data(rivers)
data('rivers')
y <- data('rivers')
y
rm(y)
data("AirPassengers")
k <- data("AirPassengers")
rm(k)
k <- AirPassengers
head(k)
View(k)
k <- data.frame(AirPassengers)
k
class(AirPassengers)
head(AirPassengers)
AirPassengers
class(rivers)
length(rivers)
mean(rivers)
head(Cavendish)
str(Cavendish)
head(Cavendish$density2, 6)
summarise_coord(Cavendish$density2)
summary(Cavendish$density2)
rivers
exec.pay
str(exec.pay)
max(exec.pay)
summary(exec.pay)
mean(exec.pay, trim = 0.1)
mean(exec.pay, trim = 0.5)
median(exec.pay)
exec.pay
order(exec.pay)
sort(exec.pay)
Orange
head(Orange)
mean(Orange$Tree)
class(Orange$Tree)
rm(list = ls())
version
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/4.Script_VSURF_Selection/2000T_Median_011221")
load(file = 'Sel_s.media_expand_rot_3VSURF2000_301121.rdata')
summary(indic.expand.vsurf)
rm(list = ls())
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling")
getwd()
rm(list = ls())
### CARGA DO DATASET (indicadores expandidos)
dados <-  read.table('VBASE_indic_s.media_rot_expand_251121.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/b.RF_com_indic_expand_ALL_84v")
getwd()
rm(list = ls())
### CARGA DO DATASET (indicadores expandidos)
dados <-  read.table('VBASE_indic_s.media_rot_expand_251121.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
#View(dados)
nrow(dados)
ncol(dados)
indic.expand <- dados
nrow(indic.expand)
ncol(indic.expand)
############################# MODELAGEM ###############################
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vbase <- ncol(indic.expand)
atrib <- indic.expand[, -c(qtcol.vbase)]
nrow(atrib)
ncol(atrib)
#View(atrib)
atrib.v <- names(atrib)
atrib.v
## DEFININDO HORIZ = JANELA DESLIZANTE PARA GARANTIR PREVISIBILIDADE
# (nesse caso, NÃO haverá deslocamento pois o mesmo já foi
#  realizado na etapa de rotulagem do dataset base, ou seja,
#  aqui o valor de h assume 1, o que implica em nenhum dia deslocado)
szv <- nrow(indic.expand)
horiz <- 1
indic.expand$RotGer <- c(indic.expand$RotGer[horiz:szv],
rep(NA, (horiz-1)))
indic.expand <- na.omit(indic.expand)
szv <- nrow(indic.expand)
## DEFININDO VARIAVEL TARGET COMO FATOR
indic.expand$RotGer <- as.factor(indic.expand$RotGer)
## DIVISAO DATASET em TREINAMENTO e TESTE
szvtrain <- floor(szv*0.75)
idxtrain <- 1:szvtrain
idxtest <- (szvtrain + horiz):szv
vtrain <- indic.expand[idxtrain, ]
sztrain <- nrow(vtrain)
vtest <- indic.expand[idxtest, ]
sztest <- nrow(vtest)
## TREINAMENTO
Xtrain <- vtrain[, atrib.v]
#View(Xtrain)
Vtrain <- data.frame(Xtrain[,], class = vtrain$RotGer)
## TESTE
Xtest <- vtest[, atrib.v]
#View(Xtest)
Vtest <- data.frame(Xtest[,], class = vtest$RotGer)
########################### RANDOM FOREST #############################
library(randomForest)
## APLICANDO RANDOM FOREST PADRAO
RFDef <- randomForest(class ~ ., data = Vtrain, ntree = 2000)
RFDef
## CALCULANDO ERROS de TESTE e TREINAMENTO (empirico)
errTestRFDef <- mean(predict(RFDef, Xtest) != Vtest$class)
errEmpRFDef <- mean(predict(RFDef, Xtrain) != Vtrain$class)
print(errTestRFDef)
print(errEmpRFDef)
## OBS: Lauretto - matriz de confusao rotulados x preditos
table(Vtest$class, predict(RFDef, Xtest))
## GRAFICO DO ERRO OUT-OF-BAG
plot(RFDef)
## INDICE VI (parametro importance = T)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
varImpPlot(RFDefImp, type = 1, scale = FALSE,
n.var = ncol(Vtrain) - 1, cex = 0.8,
main = "Importancia Variaveis - 84 Indic. Expand. RFpura - 2000T - treino = 75%")
# RESOLVENDO AGLOMERACAO NO EIXO Y - INDICADORES + IMPORTANTES
#sort(RFDefImp$importance, decreasing = TRUE)
RFDefImp$importance
idx.sort <- order(RFDefImp$importance[, "MeanDecreaseAccuracy"], decreasing = TRUE)
idx.sort
# DEFININDO INDICADORES A SEREM EXIBIDOS NO GRAFICO (n.var = ?)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
varImpPlot(RFDefImp, type = 1, scale = FALSE,
n.var = 30, cex = 0.8,
main = "Importancia Variaveis (30) - 84 Indic. Expand. RFpura - 2000T - treino = 75%")
rm(list = ls())
### CARGA DO DATASET (indicadores expandidos)
dados <-  read.table('vbase.64.rfe2000.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/d.RF_com_indic_selec_RFE2000_64v")
rm(list = ls())
### CARGA DO DATASET (indicadores expandidos)
dados <-  read.table('vbase.64.rfe2000.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
indic.expand <- dados[, -c(1)]
nrow(indic.expand)
ncol(indic.expand)
############################# MODELAGEM ###############################
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vbase <- ncol(indic.expand)
atrib <- indic.expand[, -c(qtcol.vbase)]
nrow(atrib)
ncol(atrib)
#View(atrib)
atrib.v <- names(atrib)
## DEFININDO HORIZ = JANELA DESLIZANTE PARA GARANTIR PREVISIBILIDADE
# (nesse caso, NÃO haverá deslocamento pois o mesmo já foi
#  realizado na etapa de rotulagem do dataset base, ou seja,
#  aqui o valor de h assume 1, que implica em nenhum dia deslocado)
szv <- nrow(indic.expand)
horiz <- 1
indic.expand$RotGer <- c(indic.expand$RotGer[horiz:szv],
rep(NA, (horiz-1)))
indic.expand <- na.omit(indic.expand)
szv <- nrow(indic.expand)
## DEFININDO VARIAVEL TARGET COMO FATOR
indic.expand$RotGer <- as.factor(indic.expand$RotGer)
## DIVISAO DATASET em TREINAMENTO e TESTE
szvtrain <- floor(szv*0.75)
idxtrain <- 1:szvtrain
idxtest <- (szvtrain + horiz):szv
vtrain <- indic.expand[idxtrain, ]
sztrain <- nrow(vtrain)
vtest <- indic.expand[idxtest, ]
sztest <- nrow(vtest)
## TREINAMENTO
Xtrain <- vtrain[, atrib.v]
#View(Xtrain)
Vtrain <- data.frame(Xtrain[,], class = vtrain$RotGer)
## TESTE
Xtest <- vtest[, atrib.v]
#View(Xtest)
Vtest <- data.frame(Xtest[,], class = vtest$RotGer)
########################### RANDOM FOREST #############################
library(randomForest)
## APLICANDO RANDOM FOREST PADRAO
RFDef <- randomForest(class ~ ., data = Vtrain, ntree = 2000)
RFDef
## CALCULANDO ERROS de TESTE e TREINAMENTO (empirico)
errTestRFDef <- mean(predict(RFDef, Xtest) != Vtest$class)
errEmpRFDef <- mean(predict(RFDef, Xtrain) != Vtrain$class)
print(errTestRFDef)
print(errEmpRFDef)
## OBS: Lauretto - matriz de confusao para o conjunto de teste
table(Vtest$class, predict(RFDef, Xtest))
## GRAFICO DO ERRO OUT-OF-BAG
plot(RFDef)
## INDICE VI (parametro importance = T)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
varImpPlot(RFDefImp, type = 1, scale = FALSE,
n.var = ncol(Vtrain) - 1, cex = 0.8,
main = "Import. Vars. - 64 Indicadores Selecionados RFE2000 - 5 dias - treino = 75%")
# RESOLVENDO AGLOMERACAO NO EIXO Y - INDICADORES + IMPORTANTES
#sort(RFDefImp$importance, decreasing = TRUE)
RFDefImp$importance
idx.sort <- order(RFDefImp$importance[, "MeanDecreaseAccuracy"], decreasing = TRUE)
idx.sort
# DEFININDO INDICADORES A SEREM EXIBIDOS NO GRAFICO (n.var = ?)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
varImpPlot(RFDefImp, type = 1, scale = FALSE,
n.var = 30, cex = 0.8,
main = "Importancia Variaveis (30) - 64 Indicadores Selecionados RFE2000 - 5 dias - treino = 75%")
rm(list = ls())
