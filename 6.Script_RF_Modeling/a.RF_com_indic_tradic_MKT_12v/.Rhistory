geom_text()+
labs(x='Potência',y='Consumo Cidade')+
theme_classic()+
theme(panel.grid = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
labs(x='Potência',y='Consumo Cidade')+
theme_classic()+
theme(panel.grid = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
labs(x='Potência',y='Consumo Cidade')+
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
labs(x='Potência',y='Consumo Cidade')
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
theme(panel.grid = element_line(colour = 'red'))
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
theme(panel.grid = element_blank)
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
theme(panel.grid = element_blank)
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
theme(panel.grid = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
labs(x='Potência',y='Consumo Galão/Cidade')+
theme(panel.grid = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_classic()+
labs(x='Potência',y='Consumo Galão/Cidade')+
theme(panel.grid = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city,label=Cylinders))+
geom_text()+
theme_bw()+
labs(x='Potência',y='Consumo Galão/Cidade')+
theme(panel.grid = element_blank())
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
library("GGally", lib.loc="~/R/win-library/3.3")
detach("package:GGally", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("GGally", lib.loc="~/R/win-library/3.3")
library("ggplot2", lib.loc="~/R/win-library/3.3")
library("GGally", lib.loc="~/R/win-library/3.3")
subtabela
head((subtabela))
colnames(subtabela)<-c('Consumo','Preço','Potência')
subtabela
head((subtabela))
ggpairs(subtabela)
cars.subset<-subset(l,select = c(MPG.city,Price,Horsepower,
Cylinder))
ggpairs(cars.subset())
subtabela
head((subtabela))
colnames(subtabela)<-c('Consumo','Preço','Potência')
subtabela
head((subtabela))
subtabela
colnames(subtabela)<-c('Consumo','Preço','Potência')
head((subtabela))
edit(l)
carros_subtabela<-subset(l,select = c(MPG.city,Price,Horsepower,Cylinders))
ggpairs(carros_subtabela)
ggplot(l,aes(x=Cylinders,y=Horsepower))
ggplot(l,aes(x=Cylinders,y=Horsepower))+
geom_boxplot()
ggplot(l,aes(x=Cylinders,y=Horsepower))+
geom_boxplot()+
geom_point()
ggplot(l,aes(x=Cylinders,y=Horsepower))+
geom_boxplot()
ggplot(l,aes(x=Cylinders,y=Horsepower))+
geom_boxplot()+
theme_bw()
ggplot(l,aes(x=Cylinders,y=Horsepower))+
geom_boxplot()+
geom_point()+
geom_jitter()+
theme_bw()
1+1
exp(4)
?exp
2**4
2-5
2**4
sqrt(45)
3**9
3**9
sqrt(45)
3**9
sqrt(45)
print(saudacao)
x
print(cumprimento)
print(cumprimento)
print(cumprimento)
print(sds)
a*b
bb <- c(3)
ss <- c(12)
tt <- c(33)
kkk = ss*tt
kkk
sds <- c('Olá, Mundo')
print(sds)
print(sds, color=yellow)
print(sds, color='yellow')
print(sds, color="Red")
kkk
sqrt(kkk)
pi
pi(222)
pi(n=22)
pi
e
kkk
ss
tt
sds
print('Hello, R')
quit()
quit()
exit()
q
get(getwd())
getwd()
setwd("~/R/Treinamento")
getwd()
1+1
exp(4)
load("~/R/DataScienceIntro/Variaveis_Algebra_Linear.RData")
13%%4
13%/%4
2^3
2**3
log(6)
log(6, 10)
log(6, 2)
log(6)
iris
dim(iris)
View(iris)
a <- c(1:100)
a
sample(a)
sample(a, 5)
sample(a, 5)
sample(a, 5)
b <- c(1:60)
b
length(b)
sample(b, 6)
sample(b, 6, replace = T)
sample(b, 6, replace = T)
sample(b, 6, replace = T)
rep(b)
?rep
rep(a)
sala <- c(1:49)
sala
amostra_sala <- sample(sala, 10, replace = F)
amostra_sala
iris
foreign
require(foreign)
perfil = read.epiinfo('http://www.uel.br/pessoal/silvano/Dados/Perfil.rec')
names(perfil)
str(perfil)
View(perfil)
head(perfil)
head(perfil)
perfil[1:15, 1:10]
tail(perfil)
Estatura = with(perfil, sample(ESTATURA, 25, replace = F))
Estatura
Estatura = with(perfil, sample(perfil$ESTATURA, 25, replace = F))
Estatura
mean(Estatura)
with(perfil, mean(perfil$ESTATURA))
mean(Estatura)
e = mean(perfil$ESTATURA)
e
with(perfil, mean(ESTATURA))
with(perfil, mean(perfil$ESTATURA, na=""))
mean(perfil$ESTATURA)
mean(perfil$ESTATURA, na="")
perfil2 <- na.omit(perfil)
View(perfil2)
ls()
rm(perfil2)
ls()
perfil2
with(perfil, mean(perfil$ESTATURA))
e <- perfil$ESTATURA
e
e2 <- na.omit(e)
e2
mean(e2)
e2
e
mean(e)
e1 <- c(e, na="")
e1
rm(e1)
ls()
e2
length(e2)
mean(e2)
e2
e
e2 <- e - e[87]
e2
e2 <- c(e - e[87])
e2
rm(e2)
ls()
e
ls()
e
e1 <- e[!is.na(e)]
e1
mean(e1)
p <- perfil$PESO
p
mean(p)
e
mean(e)
e2 <- e[!is.na(e)]
e2
mean(e2)
i <- perfil$IDADE
i
mean(i)
imc <- perfil$IMC
imc
mean(imc)
imc1 <- imc[!is.na(imc)]
imc1
mean(imc1)
names(perfil)
c <- perfil$CURSINHO
c
length(c)
summary(c)
summary(perfil$CURSINHO)
summary(perfil$ESTATURA)
summary(perfil$PESO)
require(car)
View(car)
dados = read.table('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
require(foreign)
dados = read.table('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
dados = read.epiinfo('htpp://www.uel.br/pessoal/silvano/Dados/Tilapia.txt', dec = ',', head=T)
iris
dim(iris)
ls()
rm(ls())
ls()
ls()
a <- iris
summary(a)
summary(a)
summary(a)
dim(a)
?sample
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
summary(amostra)
length(amostra)
length(amostra[amostra==1])
length(amostra[amostra==0])
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5, 0.5))
amostra
length(amostra[amostra==1])
length(amostra[amostra==0])
set.seed(345)
sample(c(100), 3)
sample(c(100), 3)
set.seed(345)
sample(c(100), 3)
sample(c(100), 3)
sample(c(100), 3)
sample(c(100), 3)
set.seed(345)
sample(c(100), 3)
a
View(a)
a1 <- a[sample(a), 44]
a1 <- a[sample(nrow(a), 50),]
a1 <- a[sample(nrow(a), 10),]
View(a1)
a1 <- a[sample(nrow(a), 10, prob = c(0.5, 0.5, 0.5)),]
a1 <- a[sample(nrow(a), 10, prob = c(0.5, 0.5)),]
a1 <- a[sample(nrow(a), 10, prob = 'srswod'),]
a1 <- a[sample(nrow(a), 10,),]
View(a1)
getwd()
getwd()
getwd()
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Sistemas Complexos/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR")
getwd()
getwd()
getwd()
version()
version
y <- 3.4
w <- y/k
k
k <- 2^3
w <- y/k
w
contributors()
version
getwd()
data("AirPassengers")
View(data)
data
d <- data("AirPassengers")
View(d)
data("AirPassengers")
load(d)
print(d)
data(AirPassengers)
d <- data(AirPassengers)
d
a = 2
b = 3
a + b
options(prompt = "R>")
3^2
3/2
2\7
2\\3
2/3
plot(x^2-3*x=0)
plot(x^2-3*x=0,x)
x <- 2
y <- 4.4
k <- y^x
print(k)
??"mean"
pi
2^4/2+1
mat <- matrix(data = randu(25), nrow = 5, ncol = 5, byrow = TRUE)
x <- sample(25)
x
x <- sample(25, replace = TRUE)
x
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
colnames(mat) <- c('Col1', 'Col2', 'Col3', 'Col4', 'Col5')
mat
rownames(mat) <- c('Line1', 'Line2', 'Line3', 'Line4', 'Line5')
mat
det(mat)
rm(list = ls())
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ScriptsTreino/Variety")
dados2016 <- data.frame(ano = c(rep(2016, 3)),
valor = c(938, 113, 1748),
produto = c('A', 'B', 'C'))
View(dados2016)
dados2017 <- data.frame(ano = c(rep(2017, 3)),
valor = c(8400, 837, 10983),
produto = c('H', 'Z', 'X'))
View(dados2017)
dados.finais <- rbind(dados2016, dados2017)
View(dados.finais)
dados.finais$method[1:3] <- I
dados.finais$method <- NULL
View(dados.finais)
dados.finais$method <- 11
View(dados.finais)
dados.finais$method[2]
dados.finais$method[1:3] <- 22
View(dados.finais)
dados.finais$method[c(1:3), c(4:6)] <- c(22, 33)
dados.finais$method[c(1:3, 4:6)] <- c(22, 33)
View(dados.finais)
View(dados.finais)
dados.finais$method[c(1:3)] <- 33
dados.finais$method[c(1:3)] <- 33
dados.finais$method[c(4:6)] <- 55
View(dados.finais)
dados.finais$method[c(1:3)] <- c('a')
dados.finais$method[c(4:6)] <- c('b')
View(dados.finais)
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD/6_Script_RFOREST_Modeling/c.RF_com_indicadores_selecionados_VSURF500_44v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD/4_Script_VSURF500_Selection/3a.Passada.071121.Class.Factor")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/4.Script_VSURF500_Selection/1.Passada_291121")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/c.RF_com_indic_selec_VSURF500_22v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/7.Script_RF_Metrics")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/a.RF_com_indic_tradic_MKT_12v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/7.Script_RF_Metrics")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/2.Script_Dataset_Expand")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/1.Script_Dataset_Base")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/2.Script_Dataset_Expand")
rm(list=ls())
source('bib_indicadores.r')
j=1         # periodo p/ calculo da media Close (j=1 s/ alisamento)
qs = 10     # lag de curto prazo para calculo dos indicadores
ql = 50     # lag de longo prazo para calculo dos indicadores
v = read.table('VBASE_s.media_oscil_volum_rot_251121.csv',
header=TRUE, sep=',', stringsAsFactors = FALSE)
nrow(v)
ncol(v)
View(v)
szv = nrow(v) # tamanho da serie original
# Filtragem das colunas dos preditores
# Assumimos que 1a e ultima coluna devem ser tiradas
qtcolv = ncol(v)
vindic = v[,-c(1,qtcolv)]
nrow(vindic)
ncol(vindic)
View(vindic)
rm(list=ls())
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/a.RF_com_indic_tradic_MKT_12v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/c.RF_com_indic_selec_VSURF500_22v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/a.RF_com_indic_tradic_MKT_12v")
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/6.Script_RF_Modeling/a.RF_com_indic_tradic_MKT_12v")
getwd()
rm(list = ls())
### CARGA DO DATASET (indicadores expandidos)
dados <-  read.table('VBASE_s.media_oscil_volum_rot_251121.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
View(dados)
#View(dados)
indic.expand <- dados[, -c(1)]
nrow(indic.expand)
ncol(indic.expand)
############################# MODELAGEM ###############################
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vbase <- ncol(indic.expand)
atrib <- indic.expand[, -c(qtcol.vbase)]
nrow(atrib)
ncol(atrib)
#View(atrib)
atrib.v <- names(atrib)
## DEFININDO HORIZ = JANELA DESLIZANTE PARA GARANTIR PREVISIBILIDADE
# (nesse caso, NÃO haverÃ¡ deslocamento pois o mesmo jÃ¡ foi
#  realizado na etapa de rotulagem do dataset base, ou seja,
#  aqui o valor de h assume 1, que implica em nenhum dia deslocado)
szv <- nrow(indic.expand)
horiz <- 1
indic.expand$RotGer <- c(indic.expand$RotGer[horiz:szv],
rep(NA, (horiz-1)))
indic.expand <- na.omit(indic.expand)
szv <- nrow(indic.expand)
## DEFININDO VARIAVEL TARGET COMO FATOR
indic.expand$RotGer <- as.factor(indic.expand$RotGer)
## DIVISAO DATASET em TREINAMENTO e TESTE
szvtrain <- floor(szv*0.75)
idxtrain <- 1:szvtrain
idxtest <- (szvtrain + horiz):szv
vtrain <- indic.expand[idxtrain, ]
sztrain <- nrow(vtrain)
vtest <- indic.expand[idxtest, ]
sztest <- nrow(vtest)
## TREINAMENTO
Xtrain <- vtrain[, atrib.v]
#View(Xtrain)
Vtrain <- data.frame(Xtrain[,], class = vtrain$RotGer)
## TESTE
Xtest <- vtest[, atrib.v]
#View(Xtest)
Vtest <- data.frame(Xtest[,], class = vtest$RotGer)
########################### RANDOM FOREST #############################
library(randomForest)
## APLICANDO RANDOM FOREST PADRAO
RFDef <- randomForest(class ~ ., data = Vtrain, ntree = 500)
RFDef
## CALCULANDO ERROS de TESTE e TREINAMENTO (empirico)
errTestRFDef <- mean(predict(RFDef, Xtest) != Vtest$class)
errEmpRFDef <- mean(predict(RFDef, Xtrain) != Vtrain$class)
print(errTestRFDef)
print(errEmpRFDef)
rm(list = ls())
