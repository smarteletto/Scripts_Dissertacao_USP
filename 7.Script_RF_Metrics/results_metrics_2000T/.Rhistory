getwd()
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Sistemas Complexos/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR")
getwd()
getwd()
getwd()
version()
version
y <- 3.4
w <- y/k
k
k <- 2^3
w <- y/k
w
contributors()
version
getwd()
data("AirPassengers")
View(data)
data
d <- data("AirPassengers")
View(d)
data("AirPassengers")
load(d)
print(d)
data(AirPassengers)
d <- data(AirPassengers)
d
a = 2
b = 3
a + b
options(prompt = "R>")
3^2
3/2
2\7
2\\3
2/3
plot(x^2-3*x=0)
plot(x^2-3*x=0,x)
x <- 2
y <- 4.4
k <- y^x
print(k)
??"mean"
pi
2^4/2+1
mat <- matrix(data = randu(25), nrow = 5, ncol = 5, byrow = TRUE)
x <- sample(25)
x
x <- sample(25, replace = TRUE)
x
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:45, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
x <- sample(1:1000, 25, replace = TRUE)
x
mat <- matrix(x, nrow = 5, ncol = 5, byrow = TRUE)
mat
colnames(mat) <- c('Col1', 'Col2', 'Col3', 'Col4', 'Col5')
mat
rownames(mat) <- c('Line1', 'Line2', 'Line3', 'Line4', 'Line5')
mat
det(mat)
rm(list = ls())
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/8.Script_Stability_Indic")
load(file = 'compare_vectors_vsurf_rfe_051221.rdata')
same.pos.ind.vv3.rr4
# comparando a posicao de cada indicador nos vetores vv1 e vv3
pos.ind.vv1.vv3 <- vv1 == vv3
table(pos.ind.vv1.vv3)['TRUE']
same.pos.ind.vv3.rr4 <- which(pos.ind.vv3.rr4)
same.pos.ind.vv3.rr4
same.names.ind.vv3.rr4 <- vv3[same.pos.ind.vv3.rr4]
same.names.ind.vv3.rr4
setdiff(rr4, vv3)
setdiff(vv3, rr4)
identical(vv1, vv3)
identical(vv1, vv3)
intersect(vv1, vv3)
setdiff(vv1, vv3)
setdiff(vv3, vv1)
same.pos.ind.vv1.vv3
vv3
same.pos.ind.vv1.vv3
setdiff(vv3, rr4)
setdiff(rr4, vv3)
match('CCI', v3)
match('CCI', v3)
match('RSI.Gl', r4)
match(setdiff(rr4, vv3), v3)
match(setdiff(vv3, rr4), r4)
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/9.Script_Correlat_Matrix")
load(file = 'matrix_correl_indicators_051221.rdata')
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.1, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 12 Variáveis Tradicionais Rankeadas')
getwd()
library(ggplot2)
library(ggcorrplot)
rm(list = ls())
#################################################################
################ CARGA DO DATASET 12 TRADICIONAIS ###############
dados.12v <-  read.table('VBASE_s.media_oscil_volum_rot_251121.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
#View(dados)
indic.tradic <- dados.12v[, -c(1)]
nrow(indic.tradic)
ncol(indic.tradic)
############################# MODELAGEM ###############################
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vbase <- ncol(indic.tradic)
atrib <- indic.tradic[, -c(qtcol.vbase)]
nrow(atrib)
ncol(atrib)
#View(atrib)
atrib.v <- names(atrib)
atrib.v
## DEFININDO HORIZ = JANELA DESLIZANTE PARA GARANTIR PREVISIBILIDADE
# (nesse caso, NAO havera deslocamento pois o mesmo ja foi
#  realizado na etapa de rotulagem do dataset base, ou seja,
#  aqui o valor de h assume 1, que implica em nenhum dia deslocado)
szv <- nrow(indic.tradic)
horiz <- 1
indic.tradic$RotGer <- c(indic.tradic$RotGer[horiz:szv],
rep(NA, (horiz-1)))
indic.tradic <- na.omit(indic.tradic)
szv <- nrow(indic.tradic)
## DEFININDO VARIAVEL TARGET COMO FATOR
indic.tradic$RotGer <- as.factor(indic.tradic$RotGer)
## DIVISAO DATASET em TREINAMENTO e TESTE
szvtrain <- floor(szv*0.75)
idxtrain <- 1:szvtrain
idxtest <- (szvtrain + horiz):szv
vtrain <- indic.tradic[idxtrain, ]
sztrain <- nrow(vtrain)
vtest <- indic.tradic[idxtest, ]
sztest <- nrow(vtest)
## TREINAMENTO
Xtrain <- vtrain[, atrib.v]
#View(Xtrain)
Vtrain <- data.frame(Xtrain[,], class = vtrain$RotGer)
## TESTE
Xtest <- vtest[, atrib.v]
#View(Xtest)
Vtest <- data.frame(Xtest[,], class = vtest$RotGer)
########################### RANDOM FOREST #############################
library(randomForest)
## APLICANDO RANDOM FOREST PADRAO
RFDef <- randomForest(class ~ ., data = Vtrain, ntree = 2000)
RFDef
## CALCULANDO ERROS de TESTE e TREINAMENTO (empirico)
errTestRFDef <- mean(predict(RFDef, Xtest) != Vtest$class)
errEmpRFDef <- mean(predict(RFDef, Xtrain) != Vtrain$class)
print(errTestRFDef)
print(errEmpRFDef)
## OBS: Lauretto - matriz de confusao para o conjunto de teste
table(Vtest$class, predict(RFDef, Xtest))
## INDICE VI (parametro importance = T)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
#sort(RFDefImp$importance, decreasing = TRUE)
RFDefImp$importance
idx.sort.12v <- order(RFDefImp$importance[, "MeanDecreaseAccuracy"], decreasing = TRUE)
idx.sort.12v
#var.imp.12v <- RFDefImp$importance[idx.sort.12v, ]
#var.imp.12v
best12 <- names(indic.tradic[idx.sort.12v])
best12
dados.imp.var.12trad <- indic.tradic[, idx.sort.12v]
nrow(dados.imp.var.12trad)
ncol(dados.imp.var.12trad)
## DEFININDO VARIAVEIS PREDITORAS JA RANKEADAS
atrib12.rank <- dados.imp.var.12trad
nrow(atrib12.rank)
ncol(atrib12.rank)
#View(atrib12.rank)
atrib12.rank.v <- names(atrib12.rank)
atrib12.rank.v
############### MATRIZ CORRELACAO 12 TRADICIONAIS #####################
indic.12.trad <- atrib12.rank
nrow(indic.12.trad)
ncol(indic.12.trad)
# funcao COR - calcula a correlacao entre as variaveis
cor(indic.12.trad, method = 'spearman')
#?cor
matr.corr.1 <- round(cor(indic.12.trad), 4)
head(matr.corr.1)
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.1, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 12 Variáveis Tradicionais Rankeadas')
#################################################################
################ CARGA DO DATASET 84 EXPANDIDAS #################
dados.84v <-  read.table('VBASE_indic_s.media_rot_expand_251121.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
#View(dados.84v)
nrow(dados.84v)
ncol(dados.84v)
indic.expand <- dados.84v
nrow(indic.expand)
ncol(indic.expand)
############################# MODELAGEM ###############################
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vbase <- ncol(indic.expand)
atrib <- indic.expand[, -c(qtcol.vbase)]
nrow(atrib)
ncol(atrib)
#View(atrib)
atrib.v <- names(atrib)
atrib.v
## DEFININDO HORIZ = JANELA DESLIZANTE PARA GARANTIR PREVISIBILIDADE
# (nesse caso, NÃO haverá deslocamento pois o mesmo já foi
#  realizado na etapa de rotulagem do dataset base, ou seja,
#  aqui o valor de h assume 1, o que implica em nenhum dia deslocado)
szv <- nrow(indic.expand)
horiz <- 1
indic.expand$RotGer <- c(indic.expand$RotGer[horiz:szv],
rep(NA, (horiz-1)))
indic.expand <- na.omit(indic.expand)
szv <- nrow(indic.expand)
## DEFININDO VARIAVEL TARGET COMO FATOR
indic.expand$RotGer <- as.factor(indic.expand$RotGer)
## DIVISAO DATASET em TREINAMENTO e TESTE
szvtrain <- floor(szv*0.75)
idxtrain <- 1:szvtrain
idxtest <- (szvtrain + horiz):szv
vtrain <- indic.expand[idxtrain, ]
sztrain <- nrow(vtrain)
vtest <- indic.expand[idxtest, ]
sztest <- nrow(vtest)
## TREINAMENTO
Xtrain <- vtrain[, atrib.v]
#View(Xtrain)
Vtrain <- data.frame(Xtrain[,], class = vtrain$RotGer)
## TESTE
Xtest <- vtest[, atrib.v]
#View(Xtest)
Vtest <- data.frame(Xtest[,], class = vtest$RotGer)
########################### RANDOM FOREST #############################
library(randomForest)
## APLICANDO RANDOM FOREST PADRAO
RFDef <- randomForest(class ~ ., data = Vtrain, ntree = 2000)
RFDef
## CALCULANDO ERROS de TESTE e TREINAMENTO (empirico)
errTestRFDef <- mean(predict(RFDef, Xtest) != Vtest$class)
errEmpRFDef <- mean(predict(RFDef, Xtrain) != Vtrain$class)
print(errTestRFDef)
print(errEmpRFDef)
## OBS: Lauretto - matriz de confusao rotulados x preditos
table(Vtest$class, predict(RFDef, Xtest))
## INDICE VI (parametro importance = T)
RFDefImp <- randomForest(class ~ ., data = Vtrain, importance = TRUE)
# RESOLVENDO AGLOMERACAO NO EIXO Y - INDICADORES + IMPORTANTES
#sort(RFDefImp$importance, decreasing = TRUE)
RFDefImp$importance
idx.sort <- order(RFDefImp$importance[, "MeanDecreaseAccuracy"], decreasing = TRUE)
idx.sort
#sort(RFDefImp$importance, decreasing = TRUE)
RFDefImp$importance
idx.sort.84v <- order(RFDefImp$importance[, "MeanDecreaseAccuracy"], decreasing = TRUE)
idx.sort.84v
#var.imp.84v <- RFDefImp$importance[idx.sort.84v, ]
#var.imp.84v
best84 <- names(indic.expand[idx.sort.84v])
best84
dados.imp.var.84expand <- indic.expand[, idx.sort.84v]
nrow(dados.imp.var.84expand)
ncol(dados.imp.var.84expand)
## DEFININDO VARIAVEIS PREDITORAS JA RANKEADAS
atrib84.rank <- dados.imp.var.84expand
nrow(atrib84.rank)
ncol(atrib84.rank)
#View(atrib84.rank)
atrib84.rank.v <- names(atrib84.rank)
atrib84.rank.v
################ MATRIZ CORRELACAO 84 EXPANDIDAS ###################
indic.84.expand <- atrib84.rank
nrow(indic.84.expand)
ncol(indic.84.expand)
# funcao COR - calcula a correlacao entre as variaveis
cor(indic.84.expand, method = 'spearman')
#?cor
matr.corr.2 <- round(cor(indic.84.expand), 4)
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.2, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 84 Variáveis Expandidas Rankeadas')
##################################################################
##### CARGA DO DATASET 26 VARIAVEIS SELECIONADAS VSURF2000 #######
dados.vsurf <-  read.table('vbase.26.vsurf2000.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
#View(dados.vsurf)
vsurf.26 <- dados.vsurf[, -c(1)]
nrow(vsurf.26)
ncol(vsurf.26)
## DEFININDO VARIAVEIS PREDITORAS
qtcol.vsurf.26 <- ncol(vsurf.26)
atrib26.selec <- vsurf.26[, -c(qtcol.vsurf.26)]
nrow(atrib26.selec)
ncol(atrib26.selec)
#View(atrib26.selec)
atrib26.selec.v <- names(atrib26.selec)
atrib26.selec.v
################### MATRIZ CORRELACAO VSURF 26 #####################
indic.26.vsurf <- atrib26.selec
nrow(indic.26.vsurf)
ncol(indic.26.vsurf)
# funcao COR - calcula a correlacao entre as variaveis
cor(indic.26.vsurf, method = 'spearman')
#?cor
matr.corr.3 <- round(cor(indic.26.vsurf), 4)
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.3, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 26 Variáveis Selecionadas pelo VSURF2000')
####################################################################
##### CARGA DO DATASET 64 VARIAVEIS SELECIONADAS RFE2000 ###########
dados.rfe <-  read.table('vbase.64.rfe2000.csv',
sep = ',', header = TRUE,
stringsAsFactors = FALSE)
#View(dados.rfe)
rfe.64 <- dados.rfe[, -c(1)]
nrow(rfe.64)
ncol(rfe.64)
## DEFININDO VARIAVEIS PREDITORAS
qtcol.rfe.64 <- ncol(rfe.64)
atrib64.selec <- rfe.64[, -c(qtcol.rfe.64)]
nrow(atrib64.selec)
ncol(atrib64.selec)
#View(atrib64.selec)
atrib64.selec.v <- names(atrib64.selec)
atrib64.selec.v
################### MATRIZ CORRELACAO RFE 64 #####################
indic.64.rfe <- atrib64.selec
nrow(indic.64.rfe)
ncol(indic.64.rfe)
# funcao COR - calcula a correlacao entre as variaveis
cor(indic.64.rfe, method = 'spearman')
#?cor
matr.corr.4 <- round(cor(indic.64.rfe), 4)
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.4, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 64 Variáveis Selecionadas pelo RFE2000')
corrplot(matr.corr.4)
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(matr.corr.4)
corrplot(matr.corr.4, type = 'lower')
corrplot(matr.corr.1)
corrplot(matr.corr.1. type = 'lower')
corrplot(matr.corr.1., type = 'lower')
corrplot(matr.corr.1, type = 'lower')
corrplot(matr.corr.3, type = 'lower')
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.1, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 12 Variáveis Tradicionais Rankeadas')
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.2, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 84 Variáveis Expandidas Rankeadas')
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.3, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 26 Variáveis Selecionadas pelo VSURF2000')
# funcao ggcorrplot - construcao grafica da matriz de correlacao
ggcorrplot(matr.corr.4, type = 'lower',
hc.order = FALSE,
colors = c('firebrick', 'white', 'dodgerblue4'),
title = 'Matriz de Correlação entre 64 Variáveis Selecionadas pelo RFE2000')
rm(list = ls())
setwd("C:/Users/Sergio/Downloads/Modelagem SCX/Projeto de Pesquisa - Mestrado USP/Prof. Marcelo Lauretto/Novo Projeto - Lauretto e Guilherme/ScriptsR/ProjetoREBUILD.02/7.Script_RF_Metrics/results_metrics_2000T")
getwd()
rm(list = ls())
library(ggplot2)
library(reshape2)
dados <- read.table('matriz_final_ANOVA.csv', sep = ',',
header = TRUE, stringsAsFactors = FALSE)
qtcol <- ncol(dados)
dados <- dados[, -c(1, qtcol)]
nrow(dados)
ncol(dados)
############################ ACURACIA ##########################
accuracy.12v <- dados[1:1000, 1]
accuracy.84v <- dados[1001:2000, 1]
accuracy.26v <- dados[2001:3000, 1]
accuracy.64v <- dados[3001:4000, 1]
acc <- data.frame(accuracy.12v, accuracy.84v,
accuracy.26v, accuracy.64v)
data.acc <- melt(acc)
### ANALISE SOBREPOSICAO ACURACIA
ggplot(data.acc, aes(x=value, fill=variable)) +
geom_density(alpha=0.25) + ggtitle('ACURACIA')
ggplot(data.acc, aes(x=value, fill=variable)) +
geom_histogram(alpha=0.25) + ggtitle('ACURACIA')
ggplot(data.acc, aes(y=value, fill=variable)) +
geom_boxplot() + ggtitle('ACURACIA')
######################## MACRO-F1 ##############################
macro.f1.12v <- dados[1:1000, 2]
macro.f1.84v <- dados[1001:2000, 2]
macro.f1.26v <- dados[2001:3000, 2]
macro.f1.64v <- dados[3001:4000, 2]
macro.f1 <- data.frame(macro.f1.12v, macro.f1.84v,
macro.f1.26v, macro.f1.64v)
data.macro.f1 <- melt(macro.f1)
### ANALISE SOBREPOSICAO MACRO-F1
ggplot(data.macro.f1, aes(x=value, fill=variable)) +
geom_density(alpha=0.25) + ggtitle('MACRO-F1')
ggplot(data.macro.f1, aes(x=value, fill=variable)) +
geom_histogram(alpha=0.25) + ggtitle('MACRO-F1')
ggplot(data.macro.f1, aes(y=value, fill=variable)) +
geom_boxplot() + ggtitle('MACRO-F1')
########################## PONDERADA-F1 #########################
ponderada.f1.12v <- dados[1:1000, 3]
ponderada.f1.84v <- dados[1001:2000, 3]
ponderada.f1.26v <- dados[2001:3000, 3]
ponderada.f1.64v <- dados[3001:4000, 3]
ponderada.f1 <- data.frame(ponderada.f1.12v, ponderada.f1.84v,
ponderada.f1.26v, ponderada.f1.64v)
data.ponderada.f1 <- melt(ponderada.f1)
### ANALISE SOBREPOSICAO PONDERADA-F1
ggplot(data.ponderada.f1, aes(x=value, fill=variable)) +
geom_density(alpha=0.25) + ggtitle('PONDERADA-F1')
ggplot(data.ponderada.f1, aes(x=value, fill=variable)) +
geom_histogram(alpha=0.25) + ggtitle('PONDERADA-F1')
ggplot(data.ponderada.f1, aes(y=value, fill=variable)) +
geom_boxplot() + ggtitle('PONDERADA-F1')
########################## MATTHEW COEFIC. #########################
mcc.12v <- dados[1:1000, 4]
mcc.84v <- dados[1001:2000, 4]
mcc.26v <- dados[2001:3000, 4]
mcc.64v <- dados[3001:4000, 4]
mcc <- data.frame(mcc.12v, mcc.84v,
mcc.26v, mcc.64v)
data.mcc <- melt(mcc)
### ANALISE SOBREPOSICAO MATTHEW COEFIC.
ggplot(data.mcc, aes(x=value, fill=variable)) +
geom_density(alpha=0.25) + ggtitle('MATTHEW COEFIC.')
ggplot(data.mcc, aes(x=value, fill=variable)) +
geom_histogram(alpha=0.25) + ggtitle('MATTHEW COEFIC.')
ggplot(data.mcc, aes(y=value, fill=variable)) +
geom_boxplot() + ggtitle('MATTHEW COEFIC.')
########################## KAPPA COEFIC. #########################
kappa.12v <- dados[1:1000, 5]
kappa.84v <- dados[1001:2000, 5]
kappa.26v <- dados[2001:3000, 5]
kappa.64v <- dados[3001:4000, 5]
kappa <- data.frame(kappa.12v, kappa.84v,
kappa.26v, kappa.64v)
data.kappa <- melt(kappa)
### ANALISE SOBREPOSICAO KAPPA COEFIC.
ggplot(data.kappa, aes(x=value, fill=variable)) +
geom_density(alpha=0.25) + ggtitle('KAPPA COEFIC.')
ggplot(data.kappa, aes(x=value, fill=variable)) +
geom_histogram(alpha=0.25) + ggtitle('KAPPA COEFIC.')
ggplot(data.kappa, aes(y=value, fill=variable)) +
geom_boxplot() + ggtitle('KAPPA COEFIC.')
### CALCULO PERCENTIS 5% e 95%
quantile(accuracy.12v, probs = c(0.05, 0.95))
quantile(accuracy.84v, probs = c(0.05, 0.95))
quantile(accuracy.26v, probs = c(0.05, 0.95))
quantile(accuracy.64v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(accuracy.12v, probs = c(0.05, 0.95))
quantile(accuracy.26v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(macro.f1.12v, probs = c(0.05, 0.95))
quantile(macro.f1.84v, probs = c(0.05, 0.95))
quantile(macro.f1.26v, probs = c(0.05, 0.95))
quantile(macro.f1.64v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(ponderada.f1.12v, probs = c(0.05, 0.95))
quantile(ponderada.f1.84v, probs = c(0.05, 0.95))
quantile(ponderada.f1.26v, probs = c(0.05, 0.95))
quantile(ponderada.f1.64v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(mcc.12v, probs = c(0.05, 0.95))
quantile(mcc.84v, probs = c(0.05, 0.95))
quantile(mcc.26v, probs = c(0.05, 0.95))
quantile(mcc.64v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(kappa.12v, probs = c(0.05, 0.95))
quantile(kappa.84v, probs = c(0.05, 0.95))
quantile(kappa.26v, probs = c(0.05, 0.95))
quantile(kappa.64v, probs = c(0.05, 0.95))
### CALCULO PERCENTIS 5% e 95%
quantile(accuracy.12v, probs = c(0.05, 0.95))
quantile(accuracy.26v, probs = c(0.05, 0.95))
quantile(kappa.26v, probs = c(0.05, 0.95))
quantile(kappa.64v, probs = c(0.05, 0.95))
rm(list = ls())
